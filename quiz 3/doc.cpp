#include <iostream> // Основная библиотека
#include <algorithm> // Для sort, reverse и других алгоритмов
#include <vector> // Для работы с векторами
#include <list> // Для работы с двусвязными списками
#include <set> // Для работы с множествами
#include <map> // Для работы с отображениями (ассоциативными массивами)
#include <queue> // Для работы с очередями
#include <stack> // Для работы со стеками
#include <deque> // Для работы с двусторонними очередями

int main()
{
                        STL (STANDARD TEMPLATE LIBRARY)
-------------------------------------------------------------------------
    STL (Стандартная библиотека шаблонов) включает в себя три компонента:
    1. **Контейнеры** (Containers): Вектор, список, множества, отображения и др.
    2. **Алгоритмы** (Algorithms): Сортировка, поиск, модификация данных.
    3. **Итераторы** (Iterators): Указатели для работы с элементами контейнеров.

-------------------------------------------------------------------------
    
                            CONTAINERS (КОНТЕЙНЕРЫ)

-------------------------------------------------------------------------
1. **VECTOR** (Вектор)
    Динамический массив, который автоматически изменяет свой размер.
    - Особенности:
      - Быстрый доступ к элементам по индексу.
      - Поддерживает push_back() для добавления элементов в конец.
      - Медленная вставка/удаление элементов из середины.
    - Синтаксис:
      ```cpp
      vector<int> v;                 // Пустой вектор
      vector<int> v(5, 10);          // Вектор из 5 элементов со значением 10
      ```
    - Примеры:
      ```cpp
      vector<int> v = {1, 2, 3, 4, 5};
      v.push_back(6);                // Добавление элемента в конец
      v.pop_back();                  // Удаление последнего элемента
      cout << v[0];                  // Доступ к элементу по индексу
      ```



    int n;
    cout << "Введите количество элементов: ";
    cin >> n;

    vector<int> v(n);
    cout << "Введите элементы: ";
    for (int i = 0; i < n; ++i) {
        cin >> v.at(i);
    }

    cout << "Вы ввели: ";
    for (int i = 0; i < v.size(); i++) {
        cout << v.at(i);
    }

-------------------------------------------------------------------------

3. **SET** (Множество)
    Контейнер для уникальных элементов, хранящий их в отсортированном виде.
    - Особенности:
      - Элементы не могут повторяться.
      - Быстрый поиск элементов (на основе бинарного дерева).
    - Синтаксис:
      ```cpp
      set<int> s;                    // Пустое множество
      ```
    - Примеры:
      ```cpp
      set<int> s = {3, 1, 4, 2};
      s.insert(5);                   // Добавление элемента
      s.erase(1);                    // Удаление элемента
      ```

-------------------------------------------------------------------------
4. **MAP** (Отображение)
    Ассоциативный массив, который хранит пары "ключ-значение".
    - Особенности:
      - Уникальные ключи.
      - Отсортированные ключи.
    - Синтаксис:
      ```cpp
      map<int, string> m;            // Пустой map
      ```
    - Примеры:
      ```cpp
      map<int, string> m;
      m[1] = "one";                  // Добавление пары ключ-значение
      m[2] = "two";
      m.erase(1);                    // Удаление по ключу
      ```

-------------------------------------------------------------------------
5. **QUEUE** (Очередь)
    FIFO (First-In-First-Out) структура данных.
    - Особенности:
      - Добавление элементов в конец.
      - Удаление элементов из начала.
    - Синтаксис:
      ```cpp
      queue<int> q;                  // Пустая очередь
      ```
    - Примеры:
      ```cpp
      queue<int> q;
      q.push(10);                    // Добавление элемента
      q.pop();                       // Удаление первого элемента
      ```

-------------------------------------------------------------------------
6. **STACK** (Стек)
    LIFO (Last-In-First-Out) структура данных.
    - Особенности:
      - Добавление и удаление только из конца.
    - Синтаксис:
      ```cpp
      stack<int> st;                 // Пустой стек
      ```
    - Примеры:
      ```cpp
      stack<int> st;
      st.push(10);                   // Добавление элемента
      st.pop();                      // Удаление верхнего элемента
      ```

-------------------------------------------------------------------------
7. **DEQUE** (Двусторонняя очередь)
    Поддерживает добавление и удаление элементов с обоих концов.
    - Синтаксис:
      ```cpp
      deque<int> dq;                 // Пустая двусторонняя очередь
      ```
    - Примеры:
      ```cpp
      deque<int> dq = {1, 2, 3};
      dq.push_front(0);              // Добавление в начало
      dq.push_back(4);               // Добавление в конец
      dq.pop_front();                // Удаление из начала
      ```

-------------------------------------------------------------------------
                           АЛГОРИТМЫ И ИТЕРАТОРЫ

    reverse(v.begin(), v.end()); // Разворачивает элементы контейнера
    sort(v.begin(), v.end());    // Сортирует элементы контейнера
    find(v.begin(), v.end(), x); // Ищет элемент x в контейнере
    for (map<int, string>::iterator it = m.begin(); it != m.end(); ++it) // Использование итераторов
    map<int, string> вот тут вы пишете структуру данных такую же ,для которой вы хотите создать итератор

    for (map<int, string>::iterator it = m.begin(); it != m.end(); ++it)
    {
        cout << *it; // вывод
    }










}
