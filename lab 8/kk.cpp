#include <iostream>
#include <stack>
#include <vector>

using namespace std;

// Функция для вычисления площади самого большого прямоугольника в гистограмме
int largestRectangleArea(vector<int>& histogram) {
    // Стек для хранения индексов прямоугольников
    stack<int> s;
    // Переменная для хранения максимальной площади
    int maxArea = 0;
    // Итератор для обхода массива с высотами
    int i = 0;

    // Проходим по всем прямоугольникам гистограммы
    while (i < histogram.size()) {
        // Если стек пуст или текущий прямоугольник выше или равен прямоугольнику на вершине стека
        if (s.empty() || histogram[i] >= histogram[s.top()]) {
            // Добавляем индекс текущего прямоугольника в стек
            s.push(i);
            // Переходим к следующему прямоугольнику
            i++;
        } else {
            // Если текущий прямоугольник ниже, чем на вершине стека, извлекаем индекс из стека
            int topIndex = s.top();
            s.pop();  // Удаляем верхний элемент стека

            // Рассчитываем ширину прямоугольника, используя индекс в стеке
            // Если стек пуст, это значит, что мы можем использовать всю ширину до текущего индекса i
            int width = s.empty() ? i : i - s.top() - 1;

            // Вычисляем площадь для текущего прямоугольника и обновляем максимальную площадь
            maxArea = max(maxArea, histogram[topIndex] * width);
        }
    }

    // Обрабатываем оставшиеся элементы в стеке
    while (!s.empty()) {
        int topIndex = s.top();
        s.pop();
        // Ширина для оставшихся прямоугольников — это разница между индексом i и индексом в стеке
        int width = s.empty() ? i : i - s.top() - 1;
        // Вычисляем площадь и обновляем максимальную площадь
        maxArea = max(maxArea, histogram[topIndex] * width);
    }

    // Возвращаем максимальную найденную площадь
    return maxArea;
}

int main() {
    // Чтение входных данных
    int n;
    cin >> n;  // Количество прямоугольников в гистограмме

    vector<int> heights(n);  // Вектор для хранения высот прямоугольников
    for (int i = 0; i < n; i++) {
        cin >> heights[i];  // Чтение каждой высоты прямоугольника
    }

    // Вызов функции для вычисления максимальной площади
    int result = largestRectangleArea(heights);
    
    // Вывод результата
    cout << result << endl;

    return 0;
}
